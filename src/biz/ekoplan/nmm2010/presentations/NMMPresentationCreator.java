/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package biz.ekoplan.nmm2010.presentations;

import biz.ekoplan.nmm2010.enums.NMMModelPresentationMap;
import biz.ekoplan.nmm2010.enums.NoiseSourceModelType;
import biz.ekoplan.nmm2010.enums.PresentationType;
import static biz.ekoplan.nmm2010.enums.PresentationType.DAY_AND_NIGHT;
import biz.ekoplan.nmm2010.presentation.*;
import biz.ekoplan.nmm2010.presentations.creator.NMMAvailablePresentationsListModel;
import biz.ekoplan.nmm2010.surcemodel.NMMNoiseSourceModel;
import biz.ekoplan.nmm2010.surcemodel.NMMRoadSamplingModel;
import biz.ekoplan.nmm2010.surcemodel.NMMSimpleContinuousModel;
import biz.ekoplan.nmm2010.surcemodel.NMMSimpleModel;
import biz.ekoplan.nmm2010.surcemodel.NMMSingleEventsMethodModel;
import biz.ekoplan.nmm2010.toolbox.NMMToolbox;
import biz.ekoplan.nmm2010.toolbox.TimeConverter;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.util.Locale;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import nmm2010.NMMProject;
import nmm2010.Setup;

/**
 *
 * @author jarek
 */
public class NMMPresentationCreator extends javax.swing.JDialog {

    NMMProject nmmProj;
    NMMModelPresentationMap mpm;
    final boolean DEBUG = true;
    Setup setup;
    long start;
    long end;
    Locale locale;
    
    /**
     * Creates new form NMMPresentationCreator
     */
    public NMMPresentationCreator(java.awt.Frame parent, boolean modal, 
            NMMProject _nmp, Setup _setup, long _start, long _end, Locale _locale) {
        
        super(parent, modal);
        this.nmmProj=_nmp;
        this.mpm=new NMMModelPresentationMap();
        this.setup=_setup;
        this.start=_start;
        this.end=_end;
        this.locale=_locale;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listAvailableModels = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        listAvailablePresentations = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        buttonOK = new javax.swing.JButton();
        buttonCancel = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        textNewPresentationTitle = new javax.swing.JTextField();
        checkboxForAllModels = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        labelPreview = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Presentation chooser");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Available models:");

        listAvailableModels.setModel(this.nmmProj.getNoiseSourceModelsContainer());
        listAvailableModels.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listAvailableModels.setToolTipText("Choose model to display available presentation types ...");
        listAvailableModels.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listAvailableModelsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listAvailableModels);

        listAvailablePresentations.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listAvailablePresentations.setToolTipText("Choose presentation type.");
        listAvailablePresentations.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listAvailablePresentationsValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(listAvailablePresentations);

        jLabel2.setText("Available presentations:");

        buttonOK.setText("OK");
        buttonOK.setToolTipText("Click to create new presentation.");
        buttonOK.setEnabled(false);
        buttonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOKActionPerformed(evt);
            }
        });

        buttonCancel.setText("Cancel");
        buttonCancel.setToolTipText("Click to close dialog.");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        jLabel3.setText("New presentation title:");

        textNewPresentationTitle.setText("New presentation.");

        checkboxForAllModels.setText("create for all models");

        jLabel4.setText("Preview");

        labelPreview.setBackground(new java.awt.Color(255, 255, 255));
        labelPreview.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPreview.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addGap(109, 109, 109))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 4, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(checkboxForAllModels)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonOK)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonCancel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textNewPresentationTitle)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(textNewPresentationTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(labelPreview, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonOK)
                    .addComponent(checkboxForAllModels))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOKActionPerformed
        
        PresentationType _pt;
        _pt=(PresentationType)this.listAvailablePresentations.getSelectedValue();       
        
        switch (_pt) {
            
            case DAY_AND_NIGHT0:
                NMMPresentationMegaKarta0 smp9 = new NMMPresentationMegaKarta0(
                        this.nmmProj,
                        start,
                        end,
                        this.setup,
                        (NMMNoiseSourceModel)this.listAvailableModels.getSelectedValue(),
                        this.locale);                
                smp9.setPresentationTitle(this.textNewPresentationTitle.getText());
                this.nmmProj.addPresentation(smp9);
                this.nmmProj.setSaved(false);
                break;
            
            case DAY_AND_NIGHT:
                NMMPresentationMegaKarta smp0 = new NMMPresentationMegaKarta(
                        this.nmmProj,
                        start,
                        end,
                        this.setup,
                        (NMMNoiseSourceModel)this.listAvailableModels.getSelectedValue(),
                        this.locale);                
                smp0.setPresentationTitle(this.textNewPresentationTitle.getText());
                this.nmmProj.addPresentation(smp0);
                this.nmmProj.setSaved(false);
                break;
                
            case SIMPLE_PRESENTATION:                
                NMMPresentationSimpleMeasurement smp = new NMMPresentationSimpleMeasurement(
                        this.nmmProj,
                        start,
                        end,
                        this.setup,
                        (NMMSimpleModel)this.listAvailableModels.getSelectedValue(), this.locale);                
                smp.setPresentationTitle(this.textNewPresentationTitle.getText());
                this.nmmProj.addPresentation(smp);
                this.nmmProj.setSaved(false);
                break;
                
            case SIMPLE_STATS_PRESENTATION:
                NMMPresentationSimpleStats smp2 = new NMMPresentationSimpleStats(
                        this.nmmProj,
                        start,
                        end,
                        this.setup,
                        (NMMNoiseSourceModel)this.listAvailableModels.getSelectedValue(),
                        this.locale);                
                smp2.setPresentationTitle(this.textNewPresentationTitle.getText());
                this.nmmProj.addPresentation(smp2);
                this.nmmProj.setSaved(false);
                break;
                
            case SIMPLE_CONTINUOUS:                                                
                if (this.checkboxForAllModels.isSelected()) {
                    for (int km=0; km<this.listAvailableModels.getModel().getSize();km++) {
                        NMMNoiseSourceModel nsm = (NMMNoiseSourceModel) this.listAvailableModels.getModel().getElementAt(km);
                        if (nsm.getNoiseModelType()==NoiseSourceModelType.SIMPLE_CONTINOUS_MODEL) {
                            long st = this.nmmProj.getMeasurement(nsm.getMeasurementUUID()).getMeasurementBeginTime();
                            long en = this.nmmProj.getMeasurement(nsm.getMeasurementUUID()).getMeasurementEndTime();
                            NMMPresentationSimpleContinuousMeasurement smp3 = new NMMPresentationSimpleContinuousMeasurement(
                            this.nmmProj,
                            st,
                            en,
                            this.setup,
                            nsm,
                            this.locale);                
                            smp3.setPresentationTitle(nsm.getModelName());
                            this.nmmProj.addPresentation(smp3);
                            this.nmmProj.setSaved(false);
                            System.out.println("Uworzyłem prezentację dla pomiaru: "+nsm.getMeasurementUUID());
                            System.out.println("Pomiar od" +TimeConverter.LongToTimeString(st, DateFormat.FULL, locale)+
                                    " do "+TimeConverter.LongToTimeString(en, DateFormat.FULL, locale));
                        }
                    }    
                } else {
                    NMMPresentationSimpleContinuousMeasurement smp3 = new NMMPresentationSimpleContinuousMeasurement(
                        this.nmmProj,
                        start,
                        end,
                        this.setup,
                        (NMMNoiseSourceModel)this.listAvailableModels.getSelectedValue(),
                        this.locale);                
                    smp3.setPresentationTitle(this.textNewPresentationTitle.getText());
                    this.nmmProj.addPresentation(smp3);
                    this.nmmProj.setSaved(false);
                }                
                break;
                
            case A4_STATS_PRESENTATON:
                NMMPresentationA4Stats smp5 = new NMMPresentationA4Stats(
                        this.nmmProj,
                        start,
                        end,
                        this.setup,
                        (NMMNoiseSourceModel)this.listAvailableModels.getSelectedValue(),
                        this.locale);                
                smp5.setPresentationTitle(this.textNewPresentationTitle.getText());
                this.nmmProj.addPresentation(smp5);
                this.nmmProj.setSaved(false);
            break;
                
            case A4_SOUNDPOWERLEVEL_BASIC:
                NMMPresentationA4SoundPowerLevelBasic smp6 = new 
                    NMMPresentationA4SoundPowerLevelBasic(
                        this.nmmProj,
                        start,
                        end,
                        this.setup,
                        (NMMNoiseSourceModel)this.listAvailableModels.getSelectedValue(),
                        this.locale);                
                smp6.setPresentationTitle(this.textNewPresentationTitle.getText());
                this.nmmProj.addPresentation(smp6);
                this.nmmProj.setSaved(false);
            break;
                
            case MEGA_SINGLE_EVENTS :
                NMMPresentationSingleEventsMethod smp4 = new NMMPresentationSingleEventsMethod(
                        this.nmmProj,
                        start,
                        end,
                        1,                        
                        (NMMSingleEventsMethodModel)this.listAvailableModels.getSelectedValue(),
                        this.locale,
                        this.setup);                
                smp4.setPresentationTitle(this.textNewPresentationTitle.getText());
                this.nmmProj.addPresentation(smp4);
                this.nmmProj.setSaved(false);
            break;
                
            case ROAD_NOISE_SAMPLING :
                NMMPresentationRoadNoiseSampling smp61 = new NMMPresentationRoadNoiseSampling(
                        this.nmmProj,
                        start,
                        end,
                        1,                        
                        (NMMRoadSamplingModel)this.listAvailableModels.getSelectedValue(),
                        this.locale,
                        this.setup);                
                smp61.setPresentationTitle(this.textNewPresentationTitle.getText());
                this.nmmProj.addPresentation(smp61);
                this.nmmProj.setSaved(false);
            break;
                
            case ROAD_NOISE_SAMPLING0 :
                NMMPresentationRoadNoiseSampling0 smp62 = new NMMPresentationRoadNoiseSampling0(
                        this.nmmProj,
                        start,
                        end,
                        1,                        
                        (NMMRoadSamplingModel)this.listAvailableModels.getSelectedValue(),
                        this.locale,
                        this.setup);                
                smp62.setPresentationTitle(this.textNewPresentationTitle.getText());
                this.nmmProj.addPresentation(smp62);
                this.nmmProj.setSaved(false);
            break;
                
            default:
                //innych prezentacji nie ma :-(
            break;
        }
        this.dispose();
    }//GEN-LAST:event_buttonOKActionPerformed

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_buttonCancelActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.listAvailableModels.setModel(this.nmmProj.getNoiseSourceModelsContainer());
    }//GEN-LAST:event_formWindowOpened

    private void listAvailablePresentationsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listAvailablePresentationsValueChanged
        if (!this.listAvailablePresentations.isSelectionEmpty()) {
            //jeżeli istnieje jakiś rodzaj prezentacji dostepny dla wybranego modelu
            //źródła hałasu, to można aktywować przycisk "OK"
            this.buttonOK.setEnabled(true);
            //i wyświetlić podgląd wybranej prezentacji
            
            String fileName="";            
            PresentationType _pt;
            _pt=(PresentationType)this.listAvailablePresentations.getSelectedValue();       
        
            switch (_pt) {

                case DAY_AND_NIGHT0:
                    fileName="day_and_night0.jpg";
                    break;
                case DAY_AND_NIGHT:
                    fileName="day_and_night.jpg";
                    break;
                case SIMPLE_PRESENTATION:                
                    fileName="simple_presentation.jpg";
                    break;
                case SIMPLE_STATS_PRESENTATION:
                    fileName="simple_stats_presentation.jpg";
                    break;
                case SIMPLE_CONTINUOUS:
                    fileName="X.jpg";
                    break;
                case A4_STATS_PRESENTATON:
                    fileName="X.jpg";
                    break;
                case A4_SOUNDPOWERLEVEL_BASIC:
                    fileName="X.jpg";
                    break;
                case MEGA_SINGLE_EVENTS :                
                    fileName="X.jpg";
                    break;
                default:
                    //innych prezentacji nie ma :-(
                break;
            }
            
            try {                
                BufferedImage myPicture = ImageIO.read(new File(fileName)); 
                this.labelPreview.setIcon(new ImageIcon(myPicture));
            } catch (IOException ioe) {
                System.out.println("Błą przy ładowaniu wizualizacji prezentacji: "+ioe.toString());
            }                        
        } else {
            this.buttonOK.setEnabled(false);
        }
                
    }//GEN-LAST:event_listAvailablePresentationsValueChanged

    private void listAvailableModelsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listAvailableModelsValueChanged
        NoiseSourceModelType nsmt=((NMMNoiseSourceModel)this.listAvailableModels.getSelectedValue()).getNoiseModelType();
        NMMToolbox.debugMessage("Typ modelu źródła hałasu: "+nsmt.toString(), DEBUG);
        System.out.println(mpm.getAvailablePresentations(nsmt).toString());
        NMMAvailablePresentationsListModel lm = new NMMAvailablePresentationsListModel(mpm.getAvailablePresentations(nsmt));
        this.listAvailablePresentations.setModel(lm);
        this.labelPreview.setIcon(null);
    }//GEN-LAST:event_listAvailableModelsValueChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonOK;
    private javax.swing.JCheckBox checkboxForAllModels;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelPreview;
    private javax.swing.JList listAvailableModels;
    private javax.swing.JList listAvailablePresentations;
    private javax.swing.JTextField textNewPresentationTitle;
    // End of variables declaration//GEN-END:variables
}
