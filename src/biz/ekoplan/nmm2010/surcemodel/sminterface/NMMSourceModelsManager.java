/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package biz.ekoplan.nmm2010.surcemodel.sminterface;

import biz.ekoplan.nmm2010.enums.NoiseSourceModelType;
import biz.ekoplan.nmm2010.surcemodel.*;
import biz.ekoplan.nmm2010.toolbox.NMMToolbox;
import java.util.Iterator;
import java.util.TreeSet;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import nmm2010.NMMProject;
import nmm2010.Setup;

/**
 *
 * @author jarek
 */
public class NMMSourceModelsManager extends javax.swing.JDialog {
    
    static final boolean DEBUG=true;
    
    NMMProject nmmProj;    
    Setup nmmSetup;

    /**
     * Creates new form NMMSourceModelsManager
     */
    public NMMSourceModelsManager(java.awt.Frame parent, boolean modal, NMMProject _nmmProj, Setup _setup) {
        super(parent, modal);
        this.nmmProj=_nmmProj;
        initComponents();
        this.nmmSetup=_setup;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        comboNoiseSourceModelTypes = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        listNoiseSourceModels = new javax.swing.JList();
        buttonClose = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();
        buttonEdit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("biz/ekoplan/nmm2010/languages/translations"); // NOI18N
        setTitle(bundle.getString("NMM 2010 * NOISE SOURCE MODELS MANAGER.")); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText(bundle.getString("MODEL TYPE:")); // NOI18N

        comboNoiseSourceModelTypes.setToolTipText(bundle.getString("TTYPE OF NOISE SOURCE MODELS. FILTER NOISE SOURCE MODELS IN LIST BELLOW.")); // NOI18N
        comboNoiseSourceModelTypes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboNoiseSourceModelTypesActionPerformed(evt);
            }
        });

        listNoiseSourceModels.setToolTipText(bundle.getString("NOISE SOURCE MODELS IN CURRENT PROJECT.")); // NOI18N
        jScrollPane1.setViewportView(listNoiseSourceModels);

        buttonClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/toolbarButtonGraphics/general/Stop16.gif"))); // NOI18N
        buttonClose.setText(bundle.getString("CLOSE")); // NOI18N
        buttonClose.setToolTipText(bundle.getString("CLOSE THIS DIALOG.")); // NOI18N
        buttonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCloseActionPerformed(evt);
            }
        });

        buttonDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/toolbarButtonGraphics/general/Delete16.gif"))); // NOI18N
        buttonDelete.setText(bundle.getString("DELETE")); // NOI18N
        buttonDelete.setToolTipText(bundle.getString("DELETE SELECTED NOISE SOURCE MODEL.")); // NOI18N
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });

        buttonEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/toolbarButtonGraphics/general/Edit16.gif"))); // NOI18N
        buttonEdit.setText(bundle.getString("EDIT")); // NOI18N
        buttonEdit.setToolTipText(bundle.getString("EDIT SELECTED NOISE SOURCE MODEL.")); // NOI18N
        buttonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboNoiseSourceModelTypes, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 633, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(buttonEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonClose)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboNoiseSourceModelTypes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonClose)
                    .addComponent(buttonDelete)
                    .addComponent(buttonEdit))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
                

    }//GEN-LAST:event_formWindowActivated

    private void buttonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditActionPerformed
        
        //check if any model is selected and then load and edit it ...
        if (!this.listNoiseSourceModels.isSelectionEmpty()) {            
            
            //edycja modelu metody próbkowania dla dróg
            if (this.comboNoiseSourceModelTypes.getSelectedItem().equals(
                    NMMNoiseSourceModelTypeDescriptor.getNoiseSourceModelName(
                    NoiseSourceModelType.POLISH_REFERENCE_METHOD_ROADS_SAMPLING))) {
                NMMRoadSamplingModel nrsm = (NMMRoadSamplingModel)this.listNoiseSourceModels.getSelectedValue();
                NMMRoadSamplingModelInterface rsmi = new NMMRoadSamplingModelInterface(null, true, this.nmmProj, nrsm, this.nmmSetup);
                rsmi.setLocationRelativeTo(null);
                rsmi.pack();
                rsmi.setVisible(true);
            }
            
            //edycja modelu metody obliczeniowejopartej o pojed. zdarzenia (prosta wersja)
            if (this.comboNoiseSourceModelTypes.getSelectedItem().equals(
                    NMMNoiseSourceModelTypeDescriptor.getNoiseSourceModelName(
                    NoiseSourceModelType.SIMPLE_EBASED_MEASUREMENT))
                ) {
                NMMSimpleModel sm = (NMMSimpleModel)this.listNoiseSourceModels.getSelectedValue();
                NMMSimpleModelInterface smi = new NMMSimpleModelInterface(null, true, this.nmmProj, sm);
                smi.setLocationRelativeTo(null);
                smi.pack();
                smi.setVisible(true);
            }
            
            //edycja modelu pojed. zdarzeń dla dróg i linii kolejowych i lotnisk
            if (this.comboNoiseSourceModelTypes.getSelectedItem().equals(
                    NMMNoiseSourceModelTypeDescriptor.getNoiseSourceModelName(
                    NoiseSourceModelType.POLISH_REFERENCE_METHOD_EVENTS))
                ) {
                NMMSingleEventsMethodModel sm = (NMMSingleEventsMethodModel)this.listNoiseSourceModels.getSelectedValue();
                System.out.println("Nazwa ładowanego modelu: "+sm.getModelName());
                NMMSingleEventsModelInterface smi = new NMMSingleEventsModelInterface(null, true, sm, this.nmmSetup, this.nmmProj);
                sm.addNoiseSourceModelChangedListener(smi);                
                smi.setLocationRelativeTo(null);
                smi.pack();
                smi.setVisible(true);
            }
            
            //edycja modelu prostego pomiaru
            if (this.comboNoiseSourceModelTypes.getSelectedItem().equals(
                    NMMNoiseSourceModelTypeDescriptor.getNoiseSourceModelName(
                    NoiseSourceModelType.SIMPLE_CONTINOUS_MODEL))
                ) {
                NMMSimpleContinuousModel sm = (NMMSimpleContinuousModel)this.listNoiseSourceModels.getSelectedValue();                
                NMMSimpleContinousModelInterface smi = new NMMSimpleContinousModelInterface(null, true, this.nmmProj,sm);                                
                smi.setLocationRelativeTo(null);
                smi.pack();
                smi.setVisible(true);
            }
            
            //edycja modelu mocy akustycznej
            if (this.comboNoiseSourceModelTypes.getSelectedItem().equals(
                    NMMNoiseSourceModelTypeDescriptor.getNoiseSourceModelName(
                    NoiseSourceModelType.SOUND_POWER_LEVEL_MODEL))
                ) {
                NMMSoundPowerLevelModel sm = (NMMSoundPowerLevelModel)this.listNoiseSourceModels.getSelectedValue();                
                NMMPointLocationTableModel pltm = new NMMPointLocationTableModel(this.nmmProj);                
                pltm.addInputDataListener(sm);
                NMMSoundPowerLevelModelInterface smi = new NMMSoundPowerLevelModelInterface(null, true, sm, this.nmmSetup, this.nmmProj, pltm);                                                
                this.nmmProj.addProjectModelsListener(smi);
                smi.setLocationRelativeTo(null);
                smi.pack();
                smi.setVisible(true);
                
                sm.removeNoiseSourceModelChangedListener(smi);
                this.nmmProj.removeProjectModelsListener(smi);
            }                        
        } else {
          // nothing selected - no action  
        }
    }//GEN-LAST:event_buttonEditActionPerformed

    private void comboNoiseSourceModelTypesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboNoiseSourceModelTypesActionPerformed

        //nowy model danych listy modeli źródeł hałasu
        DefaultListModel dlm = new DefaultListModel();
        
        Object[] l= this.nmmProj.getNoiseSourceModels(
                NMMNoiseSourceModelTypeDescriptor.getNoiseSourceModelType(
                this.comboNoiseSourceModelTypes.getSelectedItem().toString())
                );
        
        for (int i=0; i<l.length; i++) {
            NMMNoiseSourceModel n= (NMMNoiseSourceModel)l[i];
            dlm.addElement(n);            
        }                
        
        //dodajemy model danych do kontrolki listy
        this.listNoiseSourceModels.setModel(dlm);
    }//GEN-LAST:event_comboNoiseSourceModelTypesActionPerformed

    private void buttonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCloseActionPerformed
        this.dispose();
    }//GEN-LAST:event_buttonCloseActionPerformed

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
        
        if (this.nmmProj.deleteNoiseSourceModel((NMMNoiseSourceModel)this.listNoiseSourceModels.getSelectedValue())) {            
            this.comboNoiseSourceModelTypesActionPerformed(null);
            JOptionPane.showMessageDialog(null,java.util.ResourceBundle.getBundle("biz/ekoplan/nmm2010/languages/translations").getString("NOISE MODEL DELETED SUCCESSFULY!"), "Info", JOptionPane.INFORMATION_MESSAGE);
            if (this.nmmProj.getNumberOfNoiseSourceModels()==0) {
                this.dispose();
            }
        } else {
            JOptionPane.showMessageDialog(null,java.util.ResourceBundle.getBundle("biz/ekoplan/nmm2010/languages/translations").getString("FAILED TO DELETE NOISE SOURCE MODEL!"), java.util.ResourceBundle.getBundle("biz/ekoplan/nmm2010/languages/translations").getString("WARNING"), JOptionPane.WARNING_MESSAGE);
        }
        
    }//GEN-LAST:event_buttonDeleteActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
        TreeSet<NoiseSourceModelType> ts = new TreeSet<>();
                
        if (this.nmmProj.getNumberOfNoiseSourceModels()>0) {
            ts=this.nmmProj.getNoiseSourceModelTypes();
            this.comboNoiseSourceModelTypes.setEnabled(true);
            this.comboNoiseSourceModelTypes.removeAllItems();            
            Iterator<NoiseSourceModelType> itr=ts.iterator();
            while(itr.hasNext()) {
                NMMToolbox.debugMessage("Dodaję obiekt do listy rozwijalnej.", DEBUG);
                this.comboNoiseSourceModelTypes.addItem(
                        NMMNoiseSourceModelTypeDescriptor.getNoiseSourceModelName((NoiseSourceModelType)itr.next())
                                );
        }                                
        } else {
            this.comboNoiseSourceModelTypes.setEnabled(false);
        }                   
    }//GEN-LAST:event_formWindowOpened

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonClose;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonEdit;
    private javax.swing.JComboBox comboNoiseSourceModelTypes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList listNoiseSourceModels;
    // End of variables declaration//GEN-END:variables
}
