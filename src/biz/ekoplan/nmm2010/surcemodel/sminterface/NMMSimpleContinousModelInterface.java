/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package biz.ekoplan.nmm2010.surcemodel.sminterface;

import biz.ekoplan.nmm2010.enums.NoiseLevelIndicators;
import biz.ekoplan.nmm2010.nmmproject.NMMProjectModelsChanged;
import biz.ekoplan.nmm2010.nmmproject.NMMProjectModelsListener;
import biz.ekoplan.nmm2010.surcemodel.NMMSimpleContinousModelThreadCalc;
import biz.ekoplan.nmm2010.surcemodel.NMMSimpleContinuousModel;
import biz.ekoplan.nmm2010.surcemodel.NMMSimpleModel;
import biz.ekoplan.nmm2010.toolbox.NMMCalculationTask;
import biz.ekoplan.nmm2010.toolbox.NMMToolbox;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.JProgressBar;
import javax.swing.SwingWorker;
import nmm2010.NMMEventType;
import nmm2010.NMMProject;

/**
 *
 * @author jarek
 */
public class NMMSimpleContinousModelInterface extends javax.swing.JDialog
    implements NMMProjectModelsListener, NMMAbstractNoiseSourceModelInterface, PropertyChangeListener {

    NMMSimpleContinousModelThreadCalc tc;
    final boolean DEBUG=true;
    NMMProject nmmProj;
    NMMSimpleContinuousModel simpleNoiseSourceModel;
    boolean isComplete=true;
    NMMCalculationTask nmmCalcTask;
    
    /**
     * Creates new form NMMsimpleNoiseSourceModelInterface
     */
    public NMMSimpleContinousModelInterface(java.awt.Frame _parent, boolean _modal,
           NMMProject _nmmProj, NMMSimpleContinuousModel _sm) {
        super(_parent, _modal);        
        this.nmmProj=_nmmProj;
        simpleNoiseSourceModel=_sm;
        initComponents();
        this.checkboxNearFacade.setSelected(_sm.getFacadeCorrection());
        this.checkboxUseL95.setSelected(_sm.getBackgroundNoiseAsL95()); 
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        buttonCancel = new javax.swing.JButton();
        buttonReport = new javax.swing.JButton();
        labelLAeqD = new javax.swing.JLabel();
        checkboxNearFacade = new javax.swing.JCheckBox();
        checkboxUseL95 = new javax.swing.JCheckBox();
        textModelName = new javax.swing.JTextField();
        buttonOK = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        labelMeasurement = new javax.swing.JLabel();
        labelLAeqN = new javax.swing.JLabel();
        labelLAeqN_n1h = new javax.swing.JLabel();
        labelLAeqD_n8h = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        cbCalculate18h = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Simple noise measurement.");
        setModal(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel2.setText("Model");

        buttonCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/toolbarButtonGraphics/general/Stop16.gif"))); // NOI18N
        buttonCancel.setText("Close");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        buttonReport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/toolbarButtonGraphics/general/History16.gif"))); // NOI18N
        buttonReport.setText("Report");
        buttonReport.setToolTipText("Save calculation report to disc.");
        buttonReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonReportActionPerformed(evt);
            }
        });

        labelLAeqD.setText("<HTML>L<sub>eqD</sub>= n.a. ± n.a. dB</HTML>");

        checkboxNearFacade.setText("d<2m from facade");
        checkboxNearFacade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxNearFacadeActionPerformed(evt);
            }
        });

        checkboxUseL95.setText("L95 as background noise");
        checkboxUseL95.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxUseL95ActionPerformed(evt);
            }
        });

        buttonOK.setText("OK");
        buttonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOKActionPerformed(evt);
            }
        });

        jLabel4.setText("Measurement");

        labelMeasurement.setText("n.n.");

        labelLAeqN.setText("<HTML>L<sub>eqN</sub>= n.a. ± n.a. dB</HTML>");

        labelLAeqN_n1h.setText("<html>L<sub>eqN_n1h</sub> = n.a. dB</html>");

        labelLAeqD_n8h.setText("<html>L<sub>eqD_n8h</sub> = n.a. dB</html>");

        progressBar.setToolTipText("Worst hours calculation progress");
        progressBar.setStringPainted(true);

        cbCalculate18h.setText("calculate worst 1/8h");
        cbCalculate18h.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCalculate18hActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                        .addComponent(buttonOK)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonReport)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonCancel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(43, 43, 43)
                        .addComponent(textModelName))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelMeasurement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(checkboxNearFacade)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(checkboxUseL95))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelLAeqD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelLAeqD_n8h, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelLAeqN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(labelLAeqN_n1h, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(cbCalculate18h)))))
                        .addGap(0, 34, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(textModelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(labelMeasurement))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkboxNearFacade)
                    .addComponent(checkboxUseL95))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelLAeqD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelLAeqN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelLAeqD_n8h, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelLAeqN_n1h, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbCalculate18h)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonCancel)
                        .addComponent(buttonReport)
                        .addComponent(buttonOK))
                    .addComponent(progressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonReportActionPerformed
        double l95 = this.nmmProj.getCurrentMeasurement().getL95();
        System.out.println("L95 wynosi = "+l95);
    }//GEN-LAST:event_buttonReportActionPerformed
      

    
    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        
        try {
            tc.cancel(true);
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        this.isComplete=false;
        this.dispose();
    }//GEN-LAST:event_buttonCancelActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.textModelName.setText(simpleNoiseSourceModel.getModelName());
        this.labelMeasurement.setText(this.nmmProj.getCurrentMeasurement().getDescription());    
        this.cbCalculate18h.setSelected(this.simpleNoiseSourceModel.isCalculate18());
        this.recalculateModel();
        this.updateInterface();
        
        
    }//GEN-LAST:event_formWindowOpened

    public JProgressBar getProgressBar() {
        return this.progressBar;
    }
    
    private void buttonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOKActionPerformed
        
        //update noise source model model befor leaving dialog box
        
        simpleNoiseSourceModel.setModelName(this.textModelName.getText());
        simpleNoiseSourceModel.setBackgroundNoiseAsL95(this.checkboxUseL95.isSelected());
        simpleNoiseSourceModel.setFacadeCorrection(this.checkboxNearFacade.isSelected());        
        //now leave dialog box
        this.dispose();
    }//GEN-LAST:event_buttonOKActionPerformed

    private void checkboxNearFacadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkboxNearFacadeActionPerformed
        simpleNoiseSourceModel.setFacadeCorrection(this.checkboxNearFacade.isSelected());
        this.recalculateModel();
    }//GEN-LAST:event_checkboxNearFacadeActionPerformed

    private void checkboxUseL95ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkboxUseL95ActionPerformed
        simpleNoiseSourceModel.setBackgroundNoiseAsL95(this.checkboxUseL95.isSelected());
        this.recalculateModel();
    }//GEN-LAST:event_checkboxUseL95ActionPerformed

    private void cbCalculate18hActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCalculate18hActionPerformed
        this.simpleNoiseSourceModel.setCalculate18(this.cbCalculate18h.isSelected());
        this.recalculateModel();
    }//GEN-LAST:event_cbCalculate18hActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonOK;
    private javax.swing.JButton buttonReport;
    private javax.swing.JCheckBox cbCalculate18h;
    private javax.swing.JCheckBox checkboxNearFacade;
    private javax.swing.JCheckBox checkboxUseL95;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel labelLAeqD;
    private javax.swing.JLabel labelLAeqD_n8h;
    private javax.swing.JLabel labelLAeqN;
    private javax.swing.JLabel labelLAeqN_n1h;
    private javax.swing.JLabel labelMeasurement;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTextField textModelName;
    // End of variables declaration//GEN-END:variables

    public void dispatchNMMProjectModelsChanged(NMMProjectModelsChanged _mEvent) {
        if (this.DEBUG) {
            System.out.println("Noise source models in current project have changed."
                    + "I have to update current dialog!");
        }        
    }        

    public void updateInterface() {

        if (this.simpleNoiseSourceModel.isRecalculated()) {
            
            double tmpLAeqD=this.simpleNoiseSourceModel.getNoiseModelResult(NoiseLevelIndicators.LAeqD);
            double tmpLAeqN=this.simpleNoiseSourceModel.getNoiseModelResult(NoiseLevelIndicators.LAeqN);
            double tmpLeqN_1h = this.simpleNoiseSourceModel.getNoiseModelResult(NoiseLevelIndicators.LAeqN_n1h);
            double tmpLeqD_8h = this.simpleNoiseSourceModel.getNoiseModelResult(NoiseLevelIndicators.LAeqD_n8h);
            
            if ((!Double.isNaN(tmpLAeqD))&&(!Double.isInfinite(tmpLAeqD))) { 
            this.labelLAeqD.setText("<HTML>L<sub>AeqD</sub>= "+
                    NMMToolbox.formatDouble(tmpLAeqD) +"dB</HTML>");
            } else {
                this.labelLAeqD.setText("<HTML>L<sub>AeqD</sub>= --- dB");
            }
            
            if (!Double.isNaN(tmpLAeqN)&&!Double.isInfinite(tmpLAeqN)) {
            this.labelLAeqN.setText("<HTML>L<sub>AeqN</sub>= "+
                    NMMToolbox.formatDouble(tmpLAeqN) +"dB</HTML>");
            } else {
                this.labelLAeqN.setText("<HTML>L<sub>AeqN</sub>= --- dB");
            }
            
            if (!Double.isNaN(tmpLeqN_1h)&&!Double.isInfinite(tmpLeqN_1h)&&(tmpLeqN_1h!=-1)) {
            this.labelLAeqN_n1h.setText("<HTML>L<sub>eqN_n1h</sub>= "+
                    NMMToolbox.formatDouble(tmpLeqN_1h) +"dB</HTML>");
            } else {
                this.labelLAeqN_n1h.setText("<HTML>L<sub>AeqN_n1h</sub>= --- dB");
            }
            
            if (!Double.isNaN(tmpLeqD_8h)&&!Double.isInfinite(tmpLeqD_8h)&&(tmpLeqD_8h!=-1)) {
            this.labelLAeqD_n8h.setText("<HTML>L<sub>eqD_n8h</sub>= "+
                    NMMToolbox.formatDouble(tmpLeqD_8h) +"dB</HTML>");
            } else {
                this.labelLAeqD_n8h.setText("<HTML>L<sub>AeqD_n8h</sub>= --- dB");
            }
            
        } else {
            this.labelLAeqD.setText("<HTML>L<sub>AeqD</sub>= n.a. dB");
            this.labelLAeqN.setText("<HTML>L<sub>AeqN</sub>= n.a. dB");
            this.labelLAeqN_n1h.setText("<HTML>L<sub>AeqN_n1h</sub>= n.a. dB");
            this.labelLAeqD_n8h.setText("<HTML>L<sub>AeqD_n8h</sub>= n.a. dB");
        }
        this.progressBar.setValue(0);
        this.buttonOK.setEnabled(true);
        this.buttonReport.setEnabled(true);
    }

    @Override
    public boolean isComplete() {
        return this.isComplete;
    }

    @Override
    public void propertyChange(PropertyChangeEvent pce) {
       
         if ("progress" == pce.getPropertyName()) {
            int progress = (Integer) pce.getNewValue();
            progressBar.setValue(progress);            
        }     
          if ("state" == pce.getPropertyName()) {
            SwingWorker.StateValue progress = (SwingWorker.StateValue) pce.getNewValue();
            if (progress==SwingWorker.StateValue.DONE) {
                this.updateInterface();
            }            
        }     
    }

    private void recalculateModel() {
        this.buttonOK.setEnabled(false);
        this.buttonReport.setEnabled(false);
        
        tc = new NMMSimpleContinousModelThreadCalc(this.simpleNoiseSourceModel, this);
        tc.addPropertyChangeListener(this);
        tc.execute();
    }
}
