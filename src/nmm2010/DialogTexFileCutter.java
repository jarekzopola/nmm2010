/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DialogTexFileCutter.java
 *
 * Created on 2010-07-29, 00:30:40
 */

package nmm2010;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Locale;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author samsung
 */
public class DialogTexFileCutter extends javax.swing.JDialog {

    int firstRow=0;
    int firstColumn=0;
    int cutWidth=0;
    int licznikWierszyPliku=0;
    int licznikWierszyDoImportu=0;
    int licznikWierszyDoPokazania=0;
    NMMProject nmmproj;
    Locale locale;
    
    String[] plik = new String[900000];
    

    /** Creates new form DialogTexFileCutter */
    public DialogTexFileCutter(java.awt.Frame parent, boolean modal, 
            String _projectPath, NMMProject _nmmproj, Locale _locale) {
        super(parent, modal);
        initComponents();
        this.spinnerCutWidth.getModel().setValue((Integer)20);
        this.txtChoosenFile.setText(_projectPath);
        nmmproj=_nmmproj;
        this.locale=_locale;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtChoosenFile = new javax.swing.JTextField();
        BrowseFiles = new javax.swing.JButton();
        buttonCancel = new javax.swing.JButton();
        buttonOK = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        spinnerFirstColumn = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        spinnerFirstRow = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        spinnerCutWidth = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileViewport = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jtxtfieldReplace = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Import data into NMM");

        jLabel1.setText("Choose source text file:");

        BrowseFiles.setText("Browse");
        BrowseFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseFilesActionPerformed(evt);
            }
        });

        buttonCancel.setText("Close");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        buttonOK.setText("Import");
        buttonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOKActionPerformed(evt);
            }
        });

        jLabel2.setText("First column:");

        spinnerFirstColumn.setModel(new javax.swing.SpinnerNumberModel());
        spinnerFirstColumn.setValue(11);
        spinnerFirstColumn.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerFirstColumnStateChanged(evt);
            }
        });

        jLabel3.setText("First row:");

        spinnerFirstRow.setValue(12);
        spinnerFirstRow.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerFirstRowStateChanged(evt);
            }
        });

        jLabel4.setText("Width:");

        spinnerCutWidth.setModel(new javax.swing.SpinnerNumberModel());
        spinnerCutWidth.setValue(5);
        spinnerCutWidth.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerCutWidthStateChanged(evt);
            }
        });

        fileViewport.setColumns(20);
        fileViewport.setRows(5);
        jScrollPane1.setViewportView(fileViewport);

        jLabel5.setText("Replace ---.- with");

        jtxtfieldReplace.setText("20");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 676, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtChoosenFile, javax.swing.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BrowseFiles))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinnerFirstColumn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinnerFirstRow, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinnerCutWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jtxtfieldReplace, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonOK, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtChoosenFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BrowseFiles))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonCancel)
                        .addComponent(buttonOK))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(spinnerFirstColumn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(jtxtfieldReplace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(spinnerFirstRow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)
                        .addComponent(spinnerCutWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BrowseFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseFilesActionPerformed
        JFileChooser fc = new JFileChooser(this.txtChoosenFile.getText());
        int returnVal = fc.showOpenDialog(this);


        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            this.txtChoosenFile.setText(file.getName());
           
            try {
                FileReader fr = new FileReader(file);
                BufferedReader br = new BufferedReader(fr);
                String s;
                while (((s=br.readLine())!=null) && (licznikWierszyPliku<=899999)) {
                    plik[licznikWierszyPliku++]=s;
                }
                fr.close();
                if (licznikWierszyPliku>899999) {
                    JOptionPane.showMessageDialog(this, "Only first 900000 records have been read from file!\n");
                }
            } catch(IOException ex) {
            }
            if (licznikWierszyPliku>1000) {
                licznikWierszyDoPokazania=1000;
            } else {
                licznikWierszyDoPokazania=licznikWierszyPliku;
            }
            String total_s="";
            for (int i=0; i<licznikWierszyDoPokazania; i++) {
                total_s=total_s+plik[i]+"\n";
            }
            this.fileViewport.setText(total_s);
            this.fileViewport.setCaretPosition(0);
            this.spinnerCutWidth.getModel().setValue((Integer)5);
            this.spinnerFirstColumn.getModel().setValue((Integer)11);
            this.spinnerFirstRow.getModel().setValue((Integer)11);
            this.spinnerFirstColumn.getModel().setValue((Integer)11);
        } else {
        }
        System.out.println("W pliku było: "+licznikWierszyPliku+" wierszy.");
    }//GEN-LAST:event_BrowseFilesActionPerformed

    private void spinnerFirstColumnStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerFirstColumnStateChanged
        
        if ((Integer)this.spinnerFirstColumn.getModel().getValue()<0) {
            this.spinnerFirstColumn.getModel().setValue(0);
        }
        this.firstColumn=(Integer)(this.spinnerFirstColumn.getModel().getValue());
        System.out.println("Pierwsza kolumna ma być: "+this.firstColumn);
        if (this.firstColumn<0) {this.firstColumn=0;}
        this.updateViewport();
    }//GEN-LAST:event_spinnerFirstColumnStateChanged

    private void spinnerCutWidthStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerCutWidthStateChanged
       
        if ((Integer)(this.spinnerCutWidth.getModel().getValue())<0) {
            this.spinnerCutWidth.getModel().setValue(0);
        }
       this.cutWidth=(Integer)(this.spinnerCutWidth.getModel().getValue());
       this.updateViewport();
       System.out.println("Szerokość ma być: "+this.cutWidth);
    }//GEN-LAST:event_spinnerCutWidthStateChanged

    private void spinnerFirstRowStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerFirstRowStateChanged

       if ((Integer)(this.spinnerFirstRow.getModel().getValue())<0) {
           this.spinnerFirstRow.getModel().setValue(0);
       }
       this.firstRow=(Integer)(this.spinnerFirstRow.getModel().getValue());
       this.updateViewport();
       System.out.println("Pierwszy wiersz ma być: "+this.cutWidth);
    }//GEN-LAST:event_spinnerFirstRowStateChanged

    private void buttonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOKActionPerformed
        
        licznikWierszyDoImportu=licznikWierszyPliku-this.firstRow;
        if (this.licznikWierszyDoImportu>10) {
            NMMDatabase nmmdb = new NMMDatabase(new javax.swing.JFrame(),true, 
                    renderFinalTable(), licznikWierszyDoImportu, nmmproj, 
                    this.locale);
            nmmdb.pack();
            nmmdb.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Not enough records. At least 10 records must be selected for import", "Cannot import data", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_buttonOKActionPerformed

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_buttonCancelActionPerformed

    private float[] renderFinalTable() {
        float ft[]=new float[900000];
        int indeksTablicy=0;
        Float replaceableValue = Float.parseFloat(this.jtxtfieldReplace.getText());

        String fragment="";
            //System.out.println("Rozpoczynam tworzenie tablicy danych od wiersza: "+this.firstRow+" do "
            //        + "wiersza: "+licznikWierszyDoImportu);
            for (int i=this.firstRow; i<licznikWierszyDoImportu+this.firstRow; i++) {
                if (plik[i].length()>this.firstColumn) {
                    fragment=plik[i].substring(this.firstColumn);
                } else {
                    fragment=plik[i];
                }
                if (fragment.length()>this.cutWidth) {
                    fragment=fragment.substring(0, this.cutWidth);
                }                
                try {
                    fragment=fragment.trim();
                    ft[indeksTablicy]=Float.valueOf(fragment);
                    indeksTablicy++;
                } catch (NumberFormatException exc) {
                    ft[indeksTablicy]=replaceableValue;
                    //System.out.println("Uwaga: "+fragment+" zamieniono na "+ this.jtxtfieldReplace.getText()+", rekord:"+indeksTablicy+
                    //        " (wierszy do importu"+licznikWierszyDoImportu+")");
                    indeksTablicy++;
                }    
            }
            System.out.println();
            //JOptionPane.showMessageDialog(null, "Info", "Total number of "+licznikWierszyDoImportu+" records have been imported.", JOptionPane.INFORMATION_MESSAGE);
        return ft;
    }

    /**
     *
     * @return
     */
    private String renderViewportString() {

        String total_s="";
        String fragment="";

        for (int i=this.firstRow; i<licznikWierszyDoPokazania; i++) {
                if (plik[i].length()>this.firstColumn) {
                    fragment=plik[i].substring(this.firstColumn);
                } else {
                    fragment=plik[i];
                }
                if (fragment.length()>this.cutWidth) {
                    fragment=fragment.substring(0, this.cutWidth);
                }
                total_s=total_s+fragment+"\n";
            }
        return total_s;
    }

    private void updateViewport() {
            this.fileViewport.setText(this.renderViewportString());
            this.fileViewport.setCaretPosition(0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BrowseFiles;
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonOK;
    private javax.swing.JTextArea fileViewport;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jtxtfieldReplace;
    private javax.swing.JSpinner spinnerCutWidth;
    private javax.swing.JSpinner spinnerFirstColumn;
    private javax.swing.JSpinner spinnerFirstRow;
    private javax.swing.JTextField txtChoosenFile;
    // End of variables declaration//GEN-END:variables

}
