/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NMMEventsExportOptions.java
 *
 * Created on 2011-05-26, 14:00:33
 */

package nmm2010;

import java.beans.XMLEncoder;
import java.io.*;
import java.text.DateFormat;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import biz.ekoplan.nmm2010.toolbox.NMMToolbox;
import biz.ekoplan.nmm2010.toolbox.TimeConverter;
import java.util.Locale;

/**
 *
 * @author Jarek
 */
public class NMMEventsExportOptions extends javax.swing.JDialog {

    File file;
    NMMProject nmmproj;
    Setup setup;
    Object[] evTypes;
    Locale locale;
    
    /** Creates new form NMMEventsExportOptions */
    public NMMEventsExportOptions(java.awt.Frame parent, boolean modal, 
            NMMProject _nmmProj, Setup _setup, Locale _locale) {
        super(parent, modal);
        nmmproj=_nmmProj;
        setup=_setup;
        evTypes=nmmproj.getEventTypes();
        initComponents();
        locale=_locale;

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupFormat = new javax.swing.ButtonGroup();
        buttonGroupSelection = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        textDestinationFile = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        buttonExport = new javax.swing.JButton();
        buttonCancel = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        radioButtonLongValues = new javax.swing.JRadioButton();
        radioButtonFormatted = new javax.swing.JRadioButton();
        comboEvTypes = new javax.swing.JComboBox();
        jRadioButton1 = new javax.swing.JRadioButton();
        radioButtonSelectedType = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        checkBoxType = new javax.swing.JCheckBox();
        checkBoxDescription = new javax.swing.JCheckBox();
        checkBoxLAeq = new javax.swing.JCheckBox();
        checkBoxSEL = new javax.swing.JCheckBox();
        chkboxOnlyCurrentMeasurement = new javax.swing.JCheckBox();
        chkboxPrintTab = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Destination:");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/toolbarButtonGraphics/general/Open16.gif"))); // NOI18N
        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        buttonExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/toolbarButtonGraphics/general/Export16.gif"))); // NOI18N
        buttonExport.setText("Export");
        buttonExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExportActionPerformed(evt);
            }
        });

        buttonCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/toolbarButtonGraphics/general/Stop16.gif"))); // NOI18N
        buttonCancel.setText("Cancel");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        jLabel2.setText("Format:");

        buttonGroupFormat.add(radioButtonLongValues);
        radioButtonLongValues.setText("miliseconds");

        buttonGroupFormat.add(radioButtonFormatted);
        radioButtonFormatted.setSelected(true);
        radioButtonFormatted.setText("formatted [hh:mm:ss]");

        buttonGroupSelection.add(jRadioButton1);
        jRadioButton1.setText("all events");

        buttonGroupSelection.add(radioButtonSelectedType);
        radioButtonSelectedType.setSelected(true);
        radioButtonSelectedType.setText("selected type");
        radioButtonSelectedType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radioButtonSelectedTypeItemStateChanged(evt);
            }
        });
        radioButtonSelectedType.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                radioButtonSelectedTypePropertyChange(evt);
            }
        });

        jLabel4.setText("Selection:");

        checkBoxType.setText("event type");

        checkBoxDescription.setText("event description");

        checkBoxLAeq.setText("LAeq");

        checkBoxSEL.setText("SEL");

        chkboxOnlyCurrentMeasurement.setText("calculate SEL, LAeq only for current measurement");

        chkboxPrintTab.setSelected(true);
        chkboxPrintTab.setText("print table header");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(buttonExport)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonCancel))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(radioButtonLongValues)
                                .addGap(18, 18, 18)
                                .addComponent(radioButtonFormatted))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(textDestinationFile, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jRadioButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(radioButtonSelectedType)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboEvTypes, 0, 152, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkboxPrintTab)
                            .addComponent(chkboxOnlyCurrentMeasurement)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(checkBoxType)
                                .addGap(18, 18, 18)
                                .addComponent(checkBoxDescription)
                                .addGap(18, 18, 18)
                                .addComponent(checkBoxLAeq)
                                .addGap(18, 18, 18)
                                .addComponent(checkBoxSEL)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(textDestinationFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(radioButtonLongValues)
                    .addComponent(radioButtonFormatted))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(radioButtonSelectedType)
                    .addComponent(jLabel4)
                    .addComponent(comboEvTypes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBoxType)
                    .addComponent(checkBoxDescription)
                    .addComponent(checkBoxLAeq)
                    .addComponent(checkBoxSEL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkboxOnlyCurrentMeasurement)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkboxPrintTab)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonCancel)
                    .addComponent(buttonExport))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser fc = new JFileChooser(this.setup.getProperty("NMM_SETUP_PROJECT_PATH", null));
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
        "TXT & XML Documents", "txt", "xml");
        fc.setFileFilter(filter);
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fc.getSelectedFile();
            this.textDestinationFile.setText(file.getName());
        }    
    }//GEN-LAST:event_jButton1ActionPerformed

    private void buttonExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExportActionPerformed

        int iloscZdarzen=this.nmmproj.getEventsNumber();
        boolean exp_ok;
        NMMEvent tmpEvt;
        long tmpEvtStart;
        long tmpEvtEnd;

        try {
            //determine if export to txt or xml file\
            int dotPosition = this.textDestinationFile.getText().lastIndexOf(".");
            System.out.println("Rozszerzenie pliku:" +this.textDestinationFile.getText().substring(dotPosition+1));
            if (this.textDestinationFile.getText().substring(dotPosition+1).equals("XML")) {
                System.out.println("Creating XML File !");
                XMLEncoder e = new XMLEncoder(
                new BufferedOutputStream(
                new FileOutputStream("c:\\Test.xml")));
                for (int i=0; i<iloscZdarzen;i++) {
                    e.writeObject(nmmproj.getEvent(i));
                }                
                e.close();
            } else {                        
                FileWriter fr = new FileWriter(file);
                BufferedWriter br = new BufferedWriter(fr);
                
                //drukowanie nagłówka tabeli
                if (this.chkboxPrintTab.isSelected()) {
                    System.out.println("Printing events table header.");
                    for (int m=0;m<nmmproj.getMeasurementsNumber();m++) {
                        br.write(nmmproj.getMeasurement(m).getDescription());
                    }    
                    br.write("\n");
                }
                                
                for (int i=0; i<iloscZdarzen;i++) {                    
                    //pobieramy zdarzenie, aby potem ciągle go nie pobierać
                    tmpEvt = nmmproj.getEvent(i);
                    tmpEvtStart = tmpEvt.getStart();
                    tmpEvtEnd = tmpEvt.getEnd();
                    
                    if ((this.comboEvTypes.getSelectedItem().toString().equals(tmpEvt.getEventType().toString())) 
                            && (this.radioButtonSelectedType.isSelected())){
                        exp_ok=true;
                    } else {                        
                        if (!this.radioButtonSelectedType.isSelected()) {
                            exp_ok=true;
                        } else {
                            exp_ok=false;
                        }
                    }                
                    if (exp_ok) {
                        if (!this.radioButtonLongValues.isSelected()) {
                        br.write(TimeConverter.LongToTimeString(
                                tmpEvtStart,DateFormat.MEDIUM, this.locale)+
                                " "+
                                TimeConverter.LongToTimeString(tmpEvtEnd,
                                DateFormat.MEDIUM, this.locale));
                        } else {
                            br.write(nmmproj.getEvent(i).getStart()+
                            " "+nmmproj.getEvent(i).getEnd());
                        }
                        if (this.checkBoxType.isSelected()) {
                            br.write(" "+nmmproj.getEvent(i).getEventType().toString());
                        }
                        if (this.checkBoxDescription.isSelected()) {
                            br.write(" "+nmmproj.getEvent(i).getDescription());
                        }

                        if (this.checkBoxLAeq.isSelected()) {
                            if (this.chkboxOnlyCurrentMeasurement.isSelected()) {
                                //robi ten blok jeżeli wartości LAeq są liczone
                                //tylko dla aktywnego zapisu
                                double leqValue=this.nmmproj.getCurrentMeasurement()
                                        .getLeq(tmpEvtStart,
                                        tmpEvtEnd);
                                if (leqValue>0) {
                                    br.write(" "+NMMToolbox.formatDouble(leqValue));
                                } else {
                                    br.write("-");
                                }
                            } else  {
                                //robi ten blok jeżeli wartości LAeq są liczone
                                //dla zapisów w obrębie których występują
                                for (int m=0;m<nmmproj.getMeasurementsNumber();m++) {                                    
                                    if (nmmproj.getMeasurement(m).isWithinMeasurement(tmpEvt)) {
                                        double leqValue=this.nmmproj.getMeasurement(m).getLeq(tmpEvtStart,tmpEvtEnd);
                                        if (leqValue>0) {
                                            br.write(" "+NMMToolbox.formatDouble(leqValue));
                                        } else {
                                            //ten przypadek nie powinien się w zasadzei zdarzyć!
                                            br.write("-");
                                        }
                                    }
                                }                                                                                               
                            }                                
                        }

                        if (this.checkBoxSEL.isSelected()) {
                            double selValue=this.nmmproj.getCurrentMeasurement()
                                    .getSEL(nmmproj.getEvent(i).getStart(),
                                    nmmproj.getEvent(i).getEnd());
                            if (selValue>0) {
                                br.write(" "+NMMToolbox.formatDouble(selValue));
                            } else {
                                br.write("-");
                            }
                        }
                        br.write("\n");
                    }
                }
                br.flush();
                br.close();
            }
         } catch(IOException ex) {
         }
        this.dispose();
    }//GEN-LAST:event_buttonExportActionPerformed

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_buttonCancelActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        for (int i=0; i<this.nmmproj.getEventTypes().length; i++) {
            this.comboEvTypes.addItem(this.nmmproj.getEventTypes()[i].toString());
        }
    }//GEN-LAST:event_formWindowOpened

    private void radioButtonSelectedTypePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_radioButtonSelectedTypePropertyChange
        
    }//GEN-LAST:event_radioButtonSelectedTypePropertyChange

    private void radioButtonSelectedTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radioButtonSelectedTypeItemStateChanged
        this.comboEvTypes.setEnabled(!this.comboEvTypes.isEnabled());
    }//GEN-LAST:event_radioButtonSelectedTypeItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonExport;
    private javax.swing.ButtonGroup buttonGroupFormat;
    private javax.swing.ButtonGroup buttonGroupSelection;
    private javax.swing.JCheckBox checkBoxDescription;
    private javax.swing.JCheckBox checkBoxLAeq;
    private javax.swing.JCheckBox checkBoxSEL;
    private javax.swing.JCheckBox checkBoxType;
    private javax.swing.JCheckBox chkboxOnlyCurrentMeasurement;
    private javax.swing.JCheckBox chkboxPrintTab;
    private javax.swing.JComboBox comboEvTypes;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton radioButtonFormatted;
    private javax.swing.JRadioButton radioButtonLongValues;
    private javax.swing.JRadioButton radioButtonSelectedType;
    private javax.swing.JTextField textDestinationFile;
    // End of variables declaration//GEN-END:variables

}
