/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NMMEventImport.java
 *
 * Created on 2011-01-18, 17:07:04
 */

package nmm2010;

import biz.ekoplan.nmm2010.toolbox.TimeConverter;
import java.awt.Color;
import java.beans.XMLDecoder;
import java.io.*;
import java.text.DateFormat;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import biz.ekoplan.nmm2010.toolbox.NMMNumberInputVerifier;
import java.util.Locale;

/**
 *
 * @author Jarek
 */
public class NMMEventImport extends javax.swing.JDialog {

    NMMProject nmmProj;
    Setup nmmSetup;
    File eventsFile;
    NMMNumberInputVerifier niv = new NMMNumberInputVerifier();
    Locale locale;

    /** Creates new form NMMEventImport */
    public NMMEventImport(java.awt.Frame parent, boolean modal, 
            NMMProject _nmmproj, Setup _nmmsetup, Locale _locale) {
        super(parent, modal);
        initComponents();
        nmmProj=_nmmproj;
        nmmSetup=_nmmsetup;
        this.locale=_locale;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        textSourceFile = new javax.swing.JTextField();
        textBrowse = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        comboEventsTypes = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        buttonCancel = new javax.swing.JButton();
        buttonImport = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        textDescription = new javax.swing.JTextField();
        radioMiddle = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        buttonColor = new javax.swing.JButton();
        radioTimes = new javax.swing.JRadioButton();
        textEventTimeWidth = new javax.swing.JTextField();
        textDate = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        textTimeShift = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        radioComplete = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Import events");
        setIconImage(null);
        setName("nmmDialogEventsImport"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Source file");

        textBrowse.setText("Browse");
        textBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textBrowseActionPerformed(evt);
            }
        });

        jLabel2.setText("Events type");

        comboEventsTypes.setEditable(true);

        jLabel3.setText("(type in new type name, or choose existing one)");

        buttonCancel.setText("Cancel");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        buttonImport.setText("Import");
        buttonImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonImportActionPerformed(evt);
            }
        });

        jLabel4.setText("Description");

        buttonGroup1.add(radioMiddle);
        radioMiddle.setSelected(true);
        radioMiddle.setText("import middle time, event time span [rec]:");
        radioMiddle.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radioMiddleItemStateChanged(evt);
            }
        });
        radioMiddle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioMiddleActionPerformed(evt);
            }
        });

        jLabel5.setText("Color");

        buttonColor.setText("Choose");
        buttonColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonColorActionPerformed(evt);
            }
        });

        buttonGroup1.add(radioTimes);
        radioTimes.setText("import begining and end times");

        textEventTimeWidth.setInputVerifier(this.niv);

        jLabel6.setText("Date");

        jLabel7.setText("yyyy:mm:dd");

        jLabel8.setText("Time shift");

        textTimeShift.setText("0");
        textTimeShift.setInputVerifier(this.niv);

        jLabel9.setText("records");

        buttonGroup1.add(radioComplete);
        radioComplete.setText("import begining, end time, event type, description");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(textSourceFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textBrowse))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(comboEventsTypes, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(radioMiddle)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(textEventTimeWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(radioTimes)
                                    .addComponent(buttonColor)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(textDate, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel7))
                                    .addComponent(radioComplete))
                                .addGap(95, 95, 95))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(textDescription))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(buttonImport)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonCancel))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(textTimeShift, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel9))
                            .addComponent(jLabel6))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(textSourceFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textBrowse))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comboEventsTypes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(textDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(buttonColor))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioMiddle)
                    .addComponent(textEventTimeWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioTimes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioComplete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(textDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(textTimeShift, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonCancel)
                    .addComponent(buttonImport))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textBrowseActionPerformed

        JFileChooser fc = new JFileChooser(this.nmmSetup.getProperty("NMM_SETUP_PROJECT_PATH", null));
        int returnVal = fc.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            eventsFile = fc.getSelectedFile();
            this.textSourceFile.setText(eventsFile.getAbsolutePath());
        } else {
        }      
    }//GEN-LAST:event_textBrowseActionPerformed

    private void buttonImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonImportActionPerformed

        try {
            int dotPosition = this.textSourceFile.getText().lastIndexOf(".");
            System.out.println("Rozszerzenie pliku:" +this.textSourceFile.getText().substring(dotPosition+1));
            if (this.textSourceFile.getText().substring(dotPosition+1).equals("xml")) {
                //czytamy XML'a
                FileInputStream fis = new FileInputStream(this.textSourceFile.getText());
		BufferedInputStream bis = new BufferedInputStream(fis);
		XMLDecoder xmlDecoder = new XMLDecoder(bis);
		NMMEvent mb = (NMMEvent) xmlDecoder.readObject();
		System.out.println(mb.getDescription());
		System.out.println(mb.getEventType().getType());
                this.nmmProj.addEvent(mb);
            } else {
                //czytamy plik tekstowy
                FileReader fr = new FileReader(eventsFile);
                BufferedReader br = new BufferedReader(fr);                
                NMMEvent ev;

                NMMEventType itm;
                
                //jezeli importujemy dane bez typu zdarzenia i opisu to typ
                //zdarzenia bierzemy z okna dialogowego
                if (this.radioMiddle.isSelected() || this.radioTimes.isSelected()) {
                    itm = new NMMEventType();
                    itm.setType(this.comboEventsTypes.getSelectedItem().toString());
                    itm.setColor(this.buttonColor.getBackground());
                    itm.setDescription(this.textDescription.getText());
                    boolean ok = this.nmmProj.eventTypes.add(itm);
                    if (ok) {
                        System.out.println("Dodałem nowy rodzaj zdarzenia !");
                        this.comboEventsTypes.addItem(itm.getType());
                        System.out.println(this.nmmProj.eventTypes);
                    }
                }                
                String s;
                String da=this.textDate.getText();
                while ((s=br.readLine())!=null) {
                    itm = new NMMEventType();
                    String s1 = s.substring(0,8);
//                    String godz = s.substring(0, 2);
//                    String min = s.substring(3, 5);
//                    String sek = s.substring(6, 8);
                    if (this.radioMiddle.isSelected()) {
                        //calculate event's width in miliseconds
                        long l=this.nmmProj.getProjectTimeResolution()*
                                Long.parseLong(this.textEventTimeWidth.getText());
                        l=l/2;
                        
                        //calculate time shift inmiliseconds
                        long ts=this.nmmProj.getProjectTimeResolution()*
                                Long.parseLong(this.textTimeShift.getText());

                        System.out.println("----------------------------------------------------");
                        System.out.println("Godzina środkowa zaczytana z pliku: "+s1);
                        long est=TimeConverter.StringToLong(da,s1, this.locale)-l;
                        long eet=TimeConverter.StringToLong(da,s1, this.locale)+l;
                        System.out.println("Godziny przedziału BEZ przesunięcia od: "+est+" do "+eet);

                        est=est+ts;
                        eet=eet+ts;
                        System.out.println("Godziny przedziału Z przesunięciem od: "+est+" do "+eet);

//                        System.out.println("Zdarzenie od: "+TimeConverter.LongToTimeString(est, DateFormat.MEDIUM)+
//                                " do: "+TimeConverter.LongToTimeString(eet, DateFormat.MEDIUM));
                        
                        ev =new NMMEvent(this.textDescription.getText().toString(),
                        est, eet, itm, this.buttonColor.getBackground());
                    this.nmmProj.addEvent(ev);
                    } else if (this.radioTimes.isSelected() || this.radioComplete.isSelected()) {
                        String s2=s.substring(9,17);
//                        String godz2 = s.substring(9, 11);
//                        String min2 = s.substring(12, 14);
//                        String sek2 = s.substring(15, 17);
                        ev =new NMMEvent(this.textDescription.getText().toString(),
                           TimeConverter.StringToLong(da,s1, this.locale),
                           TimeConverter.StringToLong(da,s2, this.locale),
                           itm, this.buttonColor.getBackground());
                        
                        if (this.radioComplete.isSelected()) {                          
                            String eventType=s.substring(18,s.indexOf(" ", 19));
                            String eventDescription=s.substring(s.indexOf(" ", 19),s.length());
                            itm.setType(eventType);
                            itm.setDescription(eventDescription);
                            itm.setColor(Color.GRAY);
                            
                            //jeżeli nie ma jeszcze takiego zdarzenia, to je dodaj
                            //do zbioru typów zdarzeń
                            boolean ok = this.nmmProj.eventTypes.add(itm);
                            if (ok) {
                                System.out.println("Dodałem nowy rodzaj zdarzenia !");
                                this.comboEventsTypes.addItem(itm.getType());
                                System.out.println(this.nmmProj.eventTypes);
                            }
                            
                            ev.setEventType(itm);
                        }                                                
                        this.nmmProj.addEvent(ev);                    
                    }
                   
                   // this.nmmProj.addEvent(ev);
                }
                fr.close();
                this.nmmProj.setSaved(false);
            }
            } catch(Exception ex) {
                System.out.println("Podczas importu danych o zdarzeniach wystąpił błąd: "+ex.toString());
            }
        this.dispose();
    }//GEN-LAST:event_buttonImportActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        initializeEventsCombo();
    }//GEN-LAST:event_formWindowOpened

    private void radioMiddleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioMiddleActionPerformed
        

    }//GEN-LAST:event_radioMiddleActionPerformed

    private void buttonColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonColorActionPerformed
        this.buttonColor.setBackground(JColorChooser.showDialog(null, "Choose color for an event", Color.yellow));
    }//GEN-LAST:event_buttonColorActionPerformed

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_buttonCancelActionPerformed

    private void radioMiddleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radioMiddleItemStateChanged
        if (this.radioMiddle.isSelected()) {
            this.textEventTimeWidth.setEnabled(true);
        } else {
            this.textEventTimeWidth.setEnabled(false);
        }
    }//GEN-LAST:event_radioMiddleItemStateChanged

    private void initializeEventsCombo() {
        //System.out.println("Wchodzę do pętli dodawania nazw zdarzeń do pola wyboru...");
        this.comboEventsTypes.removeAllItems();
        for (NMMEventType item : nmmProj.eventTypes) {
            this.comboEventsTypes.addItem(item.toString());
            //System.out.println("Dodaje kolejny ("+item.toString()+").");
        }
    }

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonColor;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buttonImport;
    private javax.swing.JComboBox comboEventsTypes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JRadioButton radioComplete;
    private javax.swing.JRadioButton radioMiddle;
    private javax.swing.JRadioButton radioTimes;
    private javax.swing.JButton textBrowse;
    private javax.swing.JTextField textDate;
    private javax.swing.JTextField textDescription;
    private javax.swing.JTextField textEventTimeWidth;
    private javax.swing.JTextField textSourceFile;
    private javax.swing.JTextField textTimeShift;
    // End of variables declaration//GEN-END:variables

}
